@model Smartuser.Models.Fatura

@{
    ViewData["Title"] = "Criar Fatura";
}

<h2>Criar Fatura</h2>

<!-- Linha superior com botões de ação -->
<div class="mb-3">
    <a href='@Url.Action("ListaDeFaturas", "Fatura")' class="btn btn-secondary btn-sm me-2">
        <i class="bi bi-arrow-left"></i> Voltar para a Lista
    </a>
    <button type="submit" form="formCriarFatura" class="btn btn-primary btn-sm">
        <i class="bi bi-save"></i> Salvar Fatura
    </button>
</div>

<form asp-action="Criar" method="post" id="formCriarFatura" class="w-100">
    @Html.AntiForgeryToken()

    <!-- Cliente e Data da Venda lado a lado -->
    <div class="row mb-3">
        <div class="col-md-6">
            <label class="form-label">Cliente</label>
            <select name="ClienteID" class="form-select" required>
                <option value="">Selecione um cliente</option>
                @foreach (var cliente in ViewBag.Clientes as List<Smartuser.Models.Cliente>)
                {
                    <option value="@cliente.ID">@cliente.Nome @cliente.Sobrenome</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <label class="form-label">Data da Venda</label>
            <input type="date" name="DataVenda" class="form-control" required />
        </div>
    </div>

    <!-- Produtos -->
    <h4>Produtos da Fatura</h4>
    <table class="table table-striped table-bordered table-hover minha-tabela">
        <thead class="table-dark">
            <tr>
                <th>Produto</th>
                <th>Preço</th>
                <th>Quantidade</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody id="faturaProdutosBody">
            <!-- Linhas vão aqui -->
        </tbody>
    </table>

    <div class="mb-3">
        <button type="button" class="btn btn-secondary btn-sm" onclick="adicionarProduto()">
            <i class="bi bi-plus-circle"></i> Adicionar Produto
        </button>
    </div>

    <!-- Total -->
    <div class="mb-3">
        <label class="form-label">Valor Total</label>
        <input type="text" id="totalFatura" name="Total" class="form-control w-50" value="0" readonly />
    </div>
</form>
<!-- Modal de aviso de estoque excedido -->
<div class="modal fade" id="modalEstoqueExcedido" tabindex="-1" aria-labelledby="modalEstoqueExcedidoLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content border-warning">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title" id="modalEstoqueExcedidoLabel">
                    <i class="bi bi-exclamation-triangle-fill"></i> Aviso de Estoque
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
            </div>
            <div class="modal-body" id="modalEstoqueMensagem">
                <!-- A mensagem será preenchida via JavaScript -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-warning" data-bs-dismiss="modal">
                    <i class="bi bi-check-circle"></i> Entendi
                </button>
            </div>
        </div>
    </div>
</div>



@section Scripts {
    <script>
        function adicionarProduto() {
            var produtos = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.Produtos));
            var selectHtml = '<select name="produtoIds[]" class="form-select" onchange="atualizarPreco(this)" required>';
            selectHtml += '<option value="">Selecione um produto</option>';
                    for (var i = 0; i < produtos.length; i++) {
            var estoque = produtos[i].Estoque;
            var disabled = estoque <= 0 ? 'disabled' : '';
            var descricao = estoque <= 0 ? produtos[i].Descricao + " [Sem estoque]" : produtos[i].Descricao;

            selectHtml += '<option value="' + produtos[i].ID + '" data-preco="' + produtos[i].Preco + '" data-estoque="' + estoque + '" ' + disabled + '>' + descricao + '</option>';
        }
            selectHtml += '</select>';

            var newRow = '<tr>' +
                '<td>' + selectHtml + '</td>' +
                '<td><input type="number" step="0.01" name="precos[]" class="form-control" value="0" readonly /></td>' +
                '<td>' +
                    '<input type="number" name="quantidades[]" class="form-control" value="1" min="1" onchange="validarQuantidade(this)" required />' +
                    '<div class="form-text estoque-disponivel text-muted small"></div>' +
                '</td>' +
                '<td><button type="button" class="btn btn-danger btn-sm" onclick="removerProduto(this)"><i class="bi bi-trash"></i> Remover</button></td>' +
                '</tr>';

            document.getElementById("faturaProdutosBody").insertAdjacentHTML('beforeend', newRow);
            atualizarTotal();
        }

        function atualizarPreco(selectElem) {
            var option = selectElem.options[selectElem.selectedIndex];
            var preco = option.getAttribute("data-preco") || 0;
            var estoque = option.getAttribute("data-estoque") || 0;
            var row = selectElem.closest("tr");

            row.querySelector('input[name="precos[]"]').value = parseFloat(preco).toFixed(2);
            row.querySelector('.estoque-disponivel').innerText = "Disponível: " + estoque + " unidade(s)";
            atualizarTotal();
        }

                function validarQuantidade(input) {
            var row = input.closest("tr");
            var select = row.querySelector('select');
            var estoque = parseInt(select.options[select.selectedIndex].getAttribute("data-estoque")) || 0;
            var quantidade = parseInt(input.value) || 0;

            if (quantidade > estoque) {
                input.value = estoque > 0 ? estoque : 1;

                // Insere a mensagem no modal e exibe
                document.getElementById("modalEstoqueMensagem").innerText =
                    "Quantidade solicitada excede o estoque disponível para este produto. Quantidade disponível: " + estoque + ".";

                // Exibe o modal usando o padrão do seu sistema (com Bootstrap)
                var modal = new bootstrap.Modal(document.getElementById("modalEstoqueExcedido"));
                modal.show();
            }

            atualizarTotal();
        }


        function removerProduto(btn) {
            var row = btn.closest("tr");
            row.remove();
            atualizarTotal();
        }

        function atualizarTotal() {
            var total = 0;
            var rows = document.querySelectorAll("#faturaProdutosBody tr");
            rows.forEach(function (row) {
                var preco = parseFloat(row.querySelector('input[name="precos[]"]').value) || 0;
                var quantidade = parseFloat(row.querySelector('input[name="quantidades[]"]').value) || 0;
                total += preco * quantidade;
            });
            document.getElementById("totalFatura").value = total.toFixed(2);
        }
    </script>
}
